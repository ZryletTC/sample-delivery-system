<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4020.12">
  <POU Name="p_ModbusTx" Id="{7dfde301-1300-4648-85ba-2185bbf045a9}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM p_ModbusTx
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* Modbus controls/ readbacks back to EPICS *)

(* Global system controls *)
mb_Input_Coils[0] := xEnableRemoteControl;
mb_Input_Coils[1] := xSystemPressurized;

mb_Input_Coils[10]:=iq_stPressCtrlA.i_SyncUnitWC;  //WC readbacks
mb_Input_Coils[11]:=iq_stPressCtrlB.i_SyncUnitWC;  //WC readbacks
mb_Input_Coils[12]:=iq_stM2SelectorA.i_SyncUnitWC;  //WC readbacks
mb_Input_Coils[13]:=iq_stM2SelectorB.i_SyncUnitWC;  //WC readbacks
mb_Input_Coils[14]:=iq_stM3SelectorA.i_SyncUnitWC;  //WC readbacks
mb_Input_Coils[15]:=iq_stM3SelectorB.i_SyncUnitWC;  //WC readbacks
mb_Input_Coils[16]:=stAli.i_SyncUnitWC;

(* Selector Controls *)
mb_Output_Registers[30] := stSelector.iVici1ReqPos;
mb_Output_Registers[31] := stSelector.iVici2ReqPos;
mb_Output_Registers[32] := stSelector.iSyncReqPos;
mb_Output_Coils[30] := 0;
mb_Output_Coils[31]:= stSelector.xFMReset;
mb_Output_Coils[33] := 0;

(* Selector 2 Controls *)
mb_Output_Registers[40] := stSelector2.iVici1ReqPos;
mb_Output_Registers[41] := stSelector2.iVici2ReqPos;
mb_Output_Registers[42] := stSelector2.iSyncReqPos;
mb_Output_Coils[40] := stSelector2.xResLock;
mb_Output_Coils[41]:= stSelector2.xFMReset;

(* Selector Readbacks *)
mb_Input_Registers[30] := stSelector.stViciVlvStatus[1].iCurrPos;
mb_Input_Registers[31] := stSelector.stViciVlvStatus[2].iCurrPos;
mb_Input_Registers[32] := stSelector.iSyncResPos;
mb_Input_Registers[33] := stSelector.iFMState;
mb_Input_Registers[34] := stSelector.iFlowMeterType;

mb_Input_Coils[30] := stSelector.xFMOoR;
mb_Input_Coils[31] := stSelector.xFlowValid;
mb_Input_Coils[32] := stSelector.xResSyncd;
mb_Input_Coils[33] := stSelector.xResLocked;
mb_Input_Coils[34] := stSelector.xFMModeRb;

(* Selector 2 Readbacks *)
mb_Input_Registers[40] := stSelector2.stViciVlvStatus[1].iCurrPos;
mb_Input_Registers[41] := stSelector2.stViciVlvStatus[2].iCurrPos;
mb_Input_Registers[42] := stSelector2.iSyncResPos;
mb_Input_Registers[43] := stSelector2.iFMState;
mb_Input_Registers[44] := stSelector2.iFlowMeterType;

mb_Input_Coils[40] := stSelector2.xFMOoR;
mb_Input_Coils[41] := stSelector2.xFlowValid;
mb_Input_Coils[42] := stSelector2.xResSyncd;
mb_Input_Coils[43] := stSelector2.xResLocked;
mb_Input_Coils[44] := stSelector2.xFMModeRb;


(* Flow meters *)
MEMCPY(destAddr:=ADR( mb_PLC_Memory[0]), srcAddr:=ADR(stSelector.rFlow), n:=4);
MEMCPY(destAddr:=ADR( mb_PLC_Memory[16]), srcAddr:=ADR(stSelector2.rFlow), n:=4);

(* Proportionair controls *)
mb_Output_Coils[50]:=stRegProp1.xEnable;  //Proportionair controls
mb_Output_Coils[51]:=stRegProp2.xEnable;  //Proportionair controls

mb_Output_Coils[52]:=stRegProp3.xEnable;  //Proportionair controls
mb_Output_Coils[53]:=stRegProp4.xEnable;  //Proportionair controls

mb_Output_Registers[50]:=stRegProp1.iSetpoint;  //Proportionair controls
mb_Output_Registers[51]:=stRegProp2.iSetpoint;  //Proportionair controls
mb_Output_Registers[52]:=stRegProp1.iHiLimit;  //Proportionair controls
mb_Output_Registers[53]:=stRegProp2.iHiLimit;  //Proportionair controls

mb_Output_Registers[54]:=stRegProp3.iSetpoint;  //Proportionair controls
mb_Output_Registers[55]:=stRegProp4.iSetpoint;  //Proportionair controls
mb_Output_Registers[56]:=stRegProp3.iHiLimit;  //Proportionair controls
mb_Output_Registers[57]:=stRegProp4.iHiLimit;  //Proportionair controls

mb_Input_Registers[50]:=stRegProp1.iPressure;  //Proportionair readbacks
mb_Input_Registers[51]:=stRegProp2.iPressure;  //Proportionair readbacks

mb_Input_Registers[52]:=stRegProp3.iPressure;  //Proportionair readbacks
mb_Input_Registers[53]:=stRegProp4.iPressure;  //Proportionair readbacks

mb_Input_Coils[50]:=stRegProp1.xStable;  //Proportionair readbacks
mb_Input_Coils[51]:=stRegProp2.xStable;  //Proportionair readbacks

mb_Input_Coils[52]:=stRegProp3.xStable;  //Proportionair readbacks
mb_Input_Coils[53]:=stRegProp4.xStable;  //Proportionair readbacks


(* Minitti Manifold Controls *)
mb_Input_Coils[60]:=stManiVlv1.xILK;  //Minitti manifold valve controls
mb_Input_Coils[61]:=stManiVlv2.xILK;  //Minitti manifold valve controls
mb_Input_Coils[62]:=stManiVlv3.xILK;  //Minitti manifold valve controls
mb_Input_Coils[63]:=stManiVlv4.xILK;  //Minitti manifold valve controls
mb_Input_Coils[64]:=stManiVlv5.xILK;  //Minitti manifold valve controls
mb_Input_Coils[65]:=stManiVlv6.xILK;  //Minitti manifold valve controls
mb_Input_Coils[66]:=stManiVlv7.xILK;  //Minitti manifold valve controls
mb_Input_Coils[67]:=stManiVlv8.xILK;  //Minitti manifold valve controls
mb_Input_Coils[68]:=stManiVlv1.ixOPN;  //Minitti manifold valve controls
mb_Input_Coils[69]:=stManiVlv2.ixOPN;  //Minitti manifold valve controls
mb_Input_Coils[70]:=stManiVlv3.ixOPN;  //Minitti manifold valve controls
mb_Input_Coils[71]:=stManiVlv4.ixOPN;  //Minitti manifold valve controls
mb_Input_Coils[72]:=stManiVlv5.ixOPN;  //Minitti manifold valve controls
mb_Input_Coils[73]:=stManiVlv6.ixOPN;  //Minitti manifold valve controls
mb_Input_Coils[74]:=stManiVlv7.ixOPN;  //Minitti manifold valve controls
mb_Input_Coils[75]:=stManiVlv8.ixOPN;  //Minitti manifold valve controls
//=========================================================
// ALI Controls
	mb_Input_Coils[80]:=stALI.axisX.xHLS;  //ALI_Manip
	mb_Input_Coils[81]:=stALI.axisX.xLLS;  //ALI_Manip
	mb_Input_Coils[82]:=stALI.axisY.xHLS;  //ALI_Manip
	mb_Input_Coils[83]:=stALI.axisY.xLLS;  //ALI_Manip
	mb_Input_Coils[84]:=stALI.axisZ.xHLS;  //ALI_Manip
	mb_Input_Coils[85]:=stALI.axisZ.xLLS;  //ALI_Manip
	mb_Input_Coils[86]:=stALI.stPropVlv.xHLS;  //ALI_Manip
	mb_Input_Coils[87]:=stALI.stPropVlv.xLLS;  //ALI_Manip
	mb_Input_Coils[88]:=stALI.stPropVlv.xEnabled;  //ALI_Manip
	mb_Input_Coils[89]:=stALI.stPropVlv.xInterlock;  //ALI_Manip
	
	mb_Input_Registers[80]:=stALI.stPropVlv.q_iPercOpen;  //ALI_Manip
	mb_Input_Registers[81]:=stALI.axisX.uiMsta;  //ALI_Manip
	mb_Input_Registers[82]:=stALI.axisY.uiMsta;  //ALI_Manip
	mb_Input_Registers[83]:=stALI.axisZ.uiMsta;  //ALI_Manip
	mb_Input_Registers[84]:=stALI.stPropVlv.ePVCtrlState;  //ALI_Manip
	mb_Input_Registers[85]:=0;  //ALI_Manip
	mb_Input_Registers[86]:=0;  //ALI_Manip
	mb_Input_Registers[87]:=0;  //ALI_Manip
	mb_Input_Registers[88]:=0;  //ALI_Manip
	mb_Input_Registers[89]:=0;  //ALI_Manip
	
	mb_Output_Coils[80]:=stALI.axisX.xStart;  //ALI_Manip
	mb_Output_Coils[81]:=stALI.axisX.xStop;  //ALI_Manip
	mb_Output_Coils[82]:=stALI.axisY.xStart;  //ALI_Manip
	mb_Output_Coils[83]:=stALI.axisY.xStop;  //ALI_Manip
	mb_Output_Coils[84]:=stALI.axisZ.xStart;  //ALI_Manip
	mb_Output_Coils[85]:=stALI.axisZ.xStop;  //ALI_Manip
	mb_Output_Coils[86]:=stALI.stPropVlv.xEnable;  //ALI_Manip
	mb_Output_Coils[87]:=FALSE;  //ALI_Manip
	mb_Output_Coils[88]:=FALSE;  //ALI_Manip
	mb_Output_Coils[89]:=FALSE;  //ALI_Manip
	
	mb_Output_Registers[80]:=stALI.stPropVlv.i_iPercOpenSP;  //ALI_Manip
	mb_Output_Registers[81]:=stALI.stPropVlv.ePVCtrlStateReq;  //ALI_Manip
	mb_Output_Registers[82]:=0;  //ALI_Manip
	mb_Output_Registers[83]:=0;  //ALI_Manip
	mb_Output_Registers[84]:=0;  //ALI_Manip
	mb_Output_Registers[85]:=0;  //ALI_Manip
	mb_Output_Registers[86]:=0;  //ALI_Manip
	mb_Output_Registers[87]:=0;  //ALI_Manip
	mb_Output_Registers[88]:=0;  //ALI_Manip
	mb_Output_Registers[89]:=0;  //ALI_Manip
	
	MEMCPY(destAddr:=ADR(mb_PLC_Memory[70]), srcAddr:=ADR(stALI.axisX.rActPos), n:=SIZEOF(stALI.axisX.rActPos));  //ALI RB
	MEMCPY(destAddr:=ADR(mb_PLC_Memory[72]), srcAddr:=ADR(stALI.axisY.rActPos), n:=SIZEOF(stALI.axisY.rActPos));  //ALI RB
	MEMCPY(destAddr:=ADR(mb_PLC_Memory[74]), srcAddr:=ADR(stALI.axisZ.rActPos), n:=SIZEOF(stALI.axisZ.rActPos));  //ALI RB
	MEMCPY(destAddr:=ADR(mb_PLC_Memory[76]), srcAddr:=ADR(stALI.stNozzleBoxVG.rPRESS), n:=SIZEOF(stALI.stNozzleBoxVG.rPRESS));  //ALI RB
	MEMCPY(destAddr:=ADR(mb_PLC_Memory[78]), srcAddr:=ADR(stALI.stSkimmerVG.rPRESS), n:=SIZEOF(stALI.stSkimmerVG.rPRESS));  //ALI RB
	MEMCPY(destAddr:=ADR(mb_PLC_Memory[80]), srcAddr:=ADR(stALI.stRelaxVG.rPRESS), n:=SIZEOF(stALI.stRelaxVG.rPRESS));  //ALI RB
	MEMCPY(destAddr:=ADR(mb_PLC_Memory[90]), srcAddr:=ADR(stALI.axisX.rReqAbsPos), n:=SIZEOF(stALI.axisX.rReqAbsPos));  //ALI CTRL
	MEMCPY(destAddr:=ADR(mb_PLC_Memory[92]), srcAddr:=ADR(stALI.axisY.rReqAbsPos), n:=SIZEOF(stALI.axisY.rReqAbsPos));  //ALI CTRL
	MEMCPY(destAddr:=ADR(mb_PLC_Memory[94]), srcAddr:=ADR(stALI.axisZ.rReqAbsPos), n:=SIZEOF(stALI.axisZ.rReqAbsPos));  //ALI CTRL

]]></ST>
    </Implementation>
    <LineIds Name="p_ModbusTx">
      <LineId Id="197" Count="161" />
      <LineId Id="361" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>