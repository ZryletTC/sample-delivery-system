<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.2">
  <POU Name="FB_SelectorM2" Id="{05d43e74-122b-4b5e-b804-d6d6b1455115}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_SelectorM2
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
    {attribute 'pytmc' := '
        pv:
     '}
    stSelector	:	ST_Selector;

    fbSelectorSync	:	FB_SelectorSync;
	
	afbViciDriver : ARRAY [1..4] OF FB_ViciDriver;
    ViciCount : INT :=2;
	
	fbL01Driver	:	FB_L01Driver;
	fbSensirionDriver	:	FB_SensirionDriver;

	stStatus: STRING;
	udCount: UDINT;

	tofReset: TOF;

	index: INT := 1;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* Assign addresses on first pass *)
IF g_xFirstPass THEN
    stSelector.stViciVlvCtrl[1].iAddress := 1;
    stSelector.stViciVlvCtrl[2].iAddress := 2;
END_IF

stSelector.iId := 1020; // added for CXI SPI deployment. Ideally this will be automated in the future.

(* Flowmeter Readback *)
(* Note: Flow should be delivered in units of uL/min *)
(* If the selector changed, reset flow meter *)
(*
IF iIdOld<>stSelector.iId THEN
	stSelector.xFMReset := TRUE; // set here, reset in the driver
	iIdOld:=stSelector.iId; // After we've checked, update old Id holder
END_IF
*)
(* Run flowmeter driver based on which selector is attached *)
CASE stSelector.iId OF
	1020:
		Sensirion();
		stSelector.iFlowMeterType := 1;
	1021:
		Bronkhorst();
		stSelector.iFlowMeterType := 2;
	1022:
		Sensirion();
		stSelector.iFlowMeterType := 1;
ELSE // If the selector is not recognized we have a problem.
	stSelector.iFlowMeterType:=0;
	stSelector.rFlow := 0;
	stSelector.iFMState := 3;//invalid
END_CASE



(* Valve control *)

fbSelectorSync(iq_stSelector:=stSelector);


stSelector.stViciVlvCtrl[1].iReqPos := LIMIT(1, stSelector.iVici1ReqPos, 12);
stSelector.stViciVlvCtrl[2].iReqPos := LIMIT(1, stSelector.iVici2ReqPos, 12);


(* Run driver *)
afbViciDriver[index](
	i_xExecute:= TRUE,
	i_tTimeOut:= t#10s,
	i_stControl:= stSelector.stViciVlvCtrl[index],
	iq_stSerialRXBuffer:= SerialRXBuffer_Sel2Vici,
	iq_stSerialTXBuffer:= SerialTXBuffer_Sel2Vici,
	q_stStatus=>stSelector.stViciVlvStatus[index]);

IF 	afbViciDriver[index].q_xDone OR
	afbViciDriver[index].q_xError OR
	afbViciDriver[index].q_xTimeout THEN
	(* reset function for next time *)
	afbViciDriver[index](i_xExecute:=FALSE, iq_stSerialRXBuffer:= SerialRXBuffer_Sel2Vici, iq_stSerialTXBuffer:=  SerialTXBuffer_Sel2Vici);
	
	index := index + 1;
	IF index > ViciCount THEN index := 1; END_IF
	
END_IF

//for epics readback to be consistent
IF stSelector.xResSyncd THEN stSelector.iSyncResPos := stSelector.stViciVlvStatus[1].iCurrPos-1; END_IF


(* Shakers *)
stSelector.stShaker01.q_xPwrDO := stSelector.stShaker01.i_xEpics;
stSelector.stShaker02.q_xPwrDO := stSelector.stShaker02.i_xEpics;
stSelector.stShaker03.q_xPwrDO := stSelector.stShaker03.i_xEpics;
stSelector.stShaker04.q_xPwrDO := stSelector.stShaker04.i_xEpics;]]></ST>
    </Implementation>
    <Action Name="Bronkhorst" Id="{eee8ceac-55f7-4943-8de4-400a89888e62}">
      <Implementation>
        <ST><![CDATA[(* Bronkhorst Flowmeter driver encapsulation *)

//Set flowmeter type
stSelector.iFlowMeterType := 2;

(* Reinitialize flowmeter *)
//Note, the bronkhorst does not have any initialization process.
//stSelector.stSelFMControlBh.xReset := stSelector.xFMReset;
		
fbL01Driver(
	i_xExecute:= TRUE,
	i_tTimeOut:= t#10s,
	iq_stSerialRXBuffer:= SerialRXBuffer_Sel2FlwMtr,
	iq_stSerialTXBuffer:= SerialTXBuffer_Sel2FlwMtr,
	q_stStatus=>stSelector.stSelFMStatusBh,
	i_stControl:=stSelector.stSelFMControlBh);

IF fbL01Driver.q_xDone OR
	fbL01Driver.q_xError OR
	fbL01Driver.q_xTimeout THEN
		
		stSelector.rFlow := stSelector.stSelFMStatusBh.rFlow;
		stSelector.xFMOoR := stSelector.stSelFMStatusBh.xOoR;
		stSelector.xFlowValid := stSelector.stSelFMStatusBh.xFlowValid;
		stSelector.iFMState	:= stSelector.stSelFMStatusBh.iState;
	
	(* reset function for next time *)
	fbL01Driver(i_xExecute:=FALSE, iq_stSerialRXBuffer:= SerialRXBuffer_Sel2FlwMtr, iq_stSerialTXBuffer:=  SerialTXBuffer_Sel2FlwMtr);	
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="Sensirion" Id="{0ca88dc7-d299-44a5-8de3-aa91a7761f69}">
      <Implementation>
        <ST><![CDATA[(* Sensirion Flowmeter driver encapsulation*)	

// Set flowmeter type
stSelector.iFlowMeterType := 1;

(* Reinitialize flowmeter *)
stSelector.stSelFMControlSens.xReset := stSelector.xFMReset;
stSelector.stSelFMControlSens.xCalMode := stSelector.xFMModeReq;



fbSensirionDriver(
	i_xExecute:= TRUE,
	i_tTimeOut:= t#10s,
	iq_stSerialRXBuffer:= SerialRXBuffer_Sel2FlwMtr,
	iq_stSerialTXBuffer:= SerialTXBuffer_Sel2FlwMtr,
	q_stStatus=>stSelector.stSelFMStatusSens,
	i_stControl:=stSelector.stSelFMControlSens);

IF fbSensirionDriver2.q_xDone OR
	fbSensirionDriver2.q_xError OR
	fbSensirionDriver2.q_xTimeout THEN
		
		stSelector.rFlow := stSelector.stSelFMStatusSens.rFlow;
		stSelector.xFMOoR := stSelector.stSelFMStatusSens.xOoR;
		stSelector.xFlowValid := stSelector.stSelFMStatusSens.xFlowValid;
		stSelector.iFMState := stSelector.stSelFMStatusSens.iState;
		stSelector.xFMModeRb := stSelector.stSelFMStatusSens.xFMMode;
		
	
		(* reset function for next time *)
		fbSensirionDriver2(i_xExecute:=FALSE, iq_stSerialRXBuffer:= SerialRXBuffer_Sel2FlwMtr, iq_stSerialTXBuffer:=  SerialTXBuffer_Sel2FlwMtr);	
END_IF]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>