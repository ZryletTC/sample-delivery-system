<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.0.24">
  <POU Name="FB_FlowBusTransaction" Id="{bc2293fa-f368-4279-9f36-428849750e27}">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_FlowBusTransaction
VAR_INPUT
	i_xExecute				: 	BOOL;				(* Rising edge execute *)
	i_sCmd					: 	STRING(2); 			(* Send Data *)
	i_sNode					:	STRING(2);
	i_sType					:	STRING(2);
	i_sProcess				:	STRING(2);
	i_sParameter			:	STRING;
	i_tTimeOut				:	TIME := T#10S;  	(* Maximum wait time for reply *)
	i_CmdFlag: BOOL := FALSE;
END_VAR
VAR_OUTPUT
	q_xDone					: BOOL;
	q_sResponseData			: STRING;
	q_xError				: BOOL;
	q_xTimeout				: BOOL;
	q_sResult				: STRING;
	q_sLastSentString		: ARRAY[1..40] OF STRING;			(* Last String Sent to Serial Device - for debugging *)
	q_sLastReceivedString	: ARRAY[1..40] OF STRING;			(* Last String Received from Serial Device - for debugging *)
END_VAR
VAR_IN_OUT
	iq_stSerialRXBuffer 	: ComBuffer;
	iq_stSerialTXBuffer 	: ComBuffer;
END_VAR
VAR
	rtExecute				: R_TRIG;
	iStep					: INT;
	fbClearComBuffer		: ClearComBuffer;
	fbSendString			: SendString;
	fbReceiveString			: ReceiveString;
	sReceivedString			: STRING;
	tonTimeout				: TON;
	sSendString: STRING;
	iStringTx: INT := 1;
	iStringRx: INT := 1;
	
	iStringTxRx: INT := 1;
	sTxRxString: ARRAY[1..40] OF STRING;
	
	fbFormatParamString	:	FB_FormatString;
	fbFormatCSString	:	FB_FormatString;
	sParameter: STRING;
	iIndexChkSum: INT;
	wCsSum: WORD;
	udiParameter: UDINT;
	
	iMsgLen: INT;
	shelper: STRING;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* This function block performs serial transactions for the FlowBus Interface  *)

(* rising edge trigger *)
rtExecute(CLK:= i_xExecute);
IF rtExecute.Q THEN
	q_xDone	:= FALSE;
	q_sResponseData := '';
	q_xError := FALSE;
	q_xTimeout := FALSE;
	q_sResult:= '';
	q_sLastSentString[iStringTx] := '';
	q_sLastReceivedString[iStringRx]:= '';
	iStep := 10;
END_IF

CASE iStep OF
	0:
		; (* idle *)

	10: (* clear com buffers *)
		fbClearComBuffer(Buffer:= iq_stSerialRXBuffer);
		fbClearComBuffer(Buffer:= iq_stSerialTXBuffer);
		(* Reset receive *)
		fbReceiveString(
			Reset:= TRUE,
			ReceivedString:= sReceivedString,
			RXbuffer:= iq_stSerialRXBuffer );
			
		(* build the string *)
		sSendString := CONCAT(i_sNode, '04'); (* adding the address and command/query *)

		(* Add process ID,  not chained *)
		sSendString := CONCAT(sSendString, i_sProcess);
		
		(* Add parameter *)
		sSendString := CONCAT(sSendString, i_sParameter);
		

		(* yes we add teh process here again *)
		sSendString := CONCAT(sSendString, i_sProcess);
		
		(* parameter requested, the parameter string should include the parameter type *)
		sSendString := CONCAT(sSendString, i_sParameter);
		
		iMsgLen	:= LEN(sSendString)/2+1;
		fbFormatParamString(sFormat:= '%02x', arg1:=F_INT(iMsgLen));

		(* add length at start *)
		sSendString := CONCAT('06', sSendString);		
		
		(* add stx at start *)
		sSendString := CONCAT(':', sSendString);
		
	 	(*adding tail *)
		sSendString := CONCAT(sSendString,'$R$L'); (* add <cr> *)
		
		IF fbFormatParamString.bError OR fbFormatCSString.bError THEN
			q_sResult := CONCAT('In step 10 fbFormatString resulted in error: ', UDINT_TO_STRING(fbFormatParamString.nErrId));
			iStep := 9000;
		ELSE
			fbSendString( SendString:= sSendString, TXbuffer:= iq_stSerialTXBuffer );
		END_IF
		q_sLastSentString[iStringTx] := sSendString;
		IF iStringTx = 40 THEN iStringTx := 1; ELSE iStringTx := iStringTx +1; END_IF
		iStep := iStep + 10;

	20: (* Finish sending the String *)
		IF fbSendString.Busy THEN
			fbSendString( SendString:= sSendString, TXbuffer:= iq_stSerialTXBuffer );
		ELSIF fbSendString.Error <> 0 THEN
			q_sResult := CONCAT('In step 20 fbSendString resulted in error: ', INT_TO_STRING(fbSendString.Error));
			iStep := 9000;
		ELSIF NOT fbSendString.Busy THEN
			iStep:=iStep + 10;
		END_IF
		tonTimeout(IN:= FALSE);

	30: (* Get reply *)
		fbReceiveString(
			Prefix:= ':',
			Suffix:= '$R',
			Timeout:= i_tTimeOut,
			Reset:= FALSE,
			ReceivedString:= sReceivedString,
			RXbuffer:= iq_stSerialRXBuffer );
		tonTimeout(IN:= TRUE, PT:= i_tTimeOut);
		IF fbReceiveString.Error <> 0 THEN
			q_sResult := CONCAT('In step 30 fbReceiveString resulted in error: ', INT_TO_STRING(fbReceiveString.Error));
			iStep := 9000;
		ELSIF fbReceiveString.RxTimeout OR tonTimeout.Q THEN
			q_sResult := 'Serial device failed to reply within timeout period';
			q_xTimeout := TRUE;
			iStep := 9000;
		ELSIF fbReceiveString.StringReceived THEN
			q_sLastReceivedString[iStringRx] := sReceivedString;
			IF iStringRx = 40 THEN iStringRx := 1; ELSE iStringRx := iStringRx +1; END_IF
			IF LEN(sReceivedString) < 2 THEN
				q_sResult := 'Reply too short.';
				iStep := 9000;
			ELSE
				(* Stripping the delimiters away *)
				q_sResponseData := LEFT(sReceivedString,LEN(sReceivedString)-1);
				q_sResponseData := RIGHT(q_sResponseData,LEN(q_sResponseData)-1);
				(* helper for MID functions *)
				shelper := MID(q_sResponseData, 2,5);
				(* if the third "byte" is 02 for a response, then we were successful *)
				IF MID(q_sResponseData, 2,5) <> '02' THEN
					(* otherwise check for an error at the fourth byte *)
					IF MID(q_sResponseData, 2, 7) <> '00' THEN
						q_sResult := CONCAT('Status error code returned: ', MID(q_sResponseData,2,7));
						iStep := 9000;
					END_IF
				ELSE
					q_sResult := 'Success.';
					q_xDone:= TRUE;
					iStep := 100;
				END_IF
			END_IF
		END_IF
		
		
		

	100: (* done *)
		IF  i_xExecute = FALSE THEN
			q_xDone:= FALSE;
			iStep := 0;
		END_IF
		IF NOT i_CmdFlag THEN
			sTxRxString[iStringTxRx]:=CONCAT(CONCAT(q_sLastSentString[iStringTx], ' received '), q_sLastReceivedString[iStringRx]);
		END_IF
		IF iStringTxRx = 40 THEN iStringTxRx := 1; ELSE iStringTxRx := iStringTxRx +1; END_IF

	9000:
		q_xError := TRUE;;




END_CASE]]></ST>
    </Implementation>
    <Action Name="A_Checksum" Id="{19eb2a84-337d-4d3d-bae3-ce38bb4990ab}">
      <Implementation>
        <ST><![CDATA[wCsSum := 0;

FOR iIndexChkSum := 0 TO (LEN(sSendString) -1) DO
	wCsSum:= wCsSum + BYTE_TO_WORD(sSendString[iIndexChkSum]);
END_FOR
wCsSum	:= wCsSum MOD 256; (* modulo 256 *)
	]]></ST>
      </Implementation>
    </Action>
    <ObjectProperties />
  </POU>
</TcPlcObject>